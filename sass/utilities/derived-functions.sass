@use "functions"

@use "sass:color"
@use "sass:math"
@use "sass:meta"
@use "derived-variables"

@function findLightColor($color)
  @if meta.type-of($color) == 'color'
    $l: 96%
    @if color.lightness($color) > 96%
      $l: color.lightness($color)
    @return color.change($color, $lightness: $l)
  @return derived-variables.$background

@function findDarkColor($color)
  @if meta.type-of($color) == 'color'
    $base-l: 29%
    $luminance: functions.colorLuminance($color)
    $luminance-delta: (0.53 - $luminance)
    $target-l: math.round($base-l + ($luminance-delta * 53))
    @return color.change($color, $lightness: math.max($base-l, $target-l))
  @return derived-variables.$text-strong

@function mergeColorMaps($bulma-colors, $custom-colors)
  // We return at least Bulma's hard-coded colors
  $merged-colors: $bulma-colors

  // We want a map as input
  @if meta.type-of($custom-colors) == 'map'
    @each $name, $components in $custom-colors
      // The color name should be a string
      // and the components either a single color
      // or a colors list with at least one element
      @if meta.type-of($name) == 'string' and (meta.type-of($components) == 'list' or meta.type-of($components) == 'color') and list.length($components) >= 1
        $color-base: null
        $color-invert: null
        $color-light: null
        $color-dark: null
        $value: null

        // The param can either be a single color
        // or a list of 2 colors
        @if meta.type-of($components) == 'color'
          $color-base: $components
          $color-invert: functions.findColorInvert($color-base)
          $color-light: findLightColor($color-base)
          $color-dark: findDarkColor($color-base)
        @else if meta.type-of($components) == 'list'
          $color-base: list.nth($components, 1)
          // If Invert, Light and Dark are provided
          @if list.length($components) > 3
            $color-invert: list.nth($components, 2)
            $color-light: list.nth($components, 3)
            $color-dark: list.nth($components, 4)
            // If only Invert and Light are provided
          @else if list.length($components) > 2
            $color-invert: list.nth($components, 2)
            $color-light: list.nth($components, 3)
            $color-dark: findDarkColor($color-base)
            // If only Invert is provided
          @else
            $color-invert: list.nth($components, 2)
            $color-light: findLightColor($color-base)
            $color-dark: findDarkColor($color-base)

        $value: ($color-base, $color-invert, $color-light, $color-dark)

        // We only want to merge the map if the color base is an actual color
        @if meta.type-of($color-base) == 'color'
          // We merge this colors elements as map with Bulma's colors map
          // (we can override them this way, no multiple definition for the same name)
          // $merged-colors: map_merge($merged-colors, ($name: ($color-base, $color-invert, $color-light, $color-dark)))
          $merged-colors: map_merge($merged-colors, ($name: $value))

  @return $merged-colors