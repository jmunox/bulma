@use "sass:color"
@use "sass:list"
@use "sass:map"
@use "sass:math"
@use "sass:meta"


@function powerNumber($number, $exp)
  $value: 1
  @if $exp > 0
    @for $i from 1 through $exp
      $value: $value * $number
  @else if $exp < 0
    @for $i from 1 through -$exp
      $value: $value / $number
  @return $value

@function colorLuminance($color)
  @if meta.type-of($color) != 'color'
    @return 0.55
  $color-rgb: ('red': color.red($color),'green': color.green($color),'blue': color.blue($color))
  @each $name, $value in $color-rgb
    $adjusted: 0
    $value: $value / 255
    @if $value < 0.03928
      $value: $value / 12.92
    @else
      $value: ($value + .055) / 1.055
      $value: powerNumber($value, 2)
    $color-rgb: map.merge($color-rgb, ($name: $value))
  @return (map.get($color-rgb, 'red') * .2126) + (map.get($color-rgb, 'green') * .7152) + (map.get($color-rgb, 'blue') * .0722)

@function findColorInvert($color)
  @if (colorLuminance($color) > 0.55)
    @return rgba(#000, 0.7)
  @else
    @return #fff

@function bulmaRgba($color, $alpha)
  @if meta.type-of($color) != 'color'
    @return $color
  @return rgba($color, $alpha)

@function bulmaDarken($color, $amount)
  @if meta.type-of($color) != 'color'
    @return $color
  @return color.adjust($color, $lightness: -$amount)
